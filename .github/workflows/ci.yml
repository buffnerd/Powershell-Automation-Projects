name: PowerShell CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PowerShell
      shell: pwsh
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name PSScriptAnalyzer -Force
        Install-Module -Name Pester -Force -SkipPublisherCheck
    
    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        $results = @()
        Get-ChildItem -Path . -Include "*.ps1","*.psm1","*.psd1" -Recurse | ForEach-Object {
          $analysis = Invoke-ScriptAnalyzer -Path $_.FullName -Severity Warning,Error
          if ($analysis) {
            $results += $analysis
            Write-Host "Issues found in $($_.Name):" -ForegroundColor Yellow
            $analysis | Format-Table -AutoSize
          }
        }
        
        if ($results.Count -gt 0) {
          Write-Host "‚ùå PSScriptAnalyzer found $($results.Count) issues" -ForegroundColor Red
          exit 1
        } else {
          Write-Host "‚úÖ PSScriptAnalyzer passed with no issues" -ForegroundColor Green
        }
    
    - name: Run Pester Tests
      shell: pwsh
      run: |
        $testResults = @()
        Get-ChildItem -Path . -Include "*.tests.ps1" -Recurse | ForEach-Object {
          $result = Invoke-Pester -Path $_.FullName -PassThru
          $testResults += $result
        }
        
        $totalTests = ($testResults | Measure-Object -Property TotalCount -Sum).Sum
        $passedTests = ($testResults | Measure-Object -Property PassedCount -Sum).Sum
        $failedTests = ($testResults | Measure-Object -Property FailedCount -Sum).Sum
        
        Write-Host "Test Results:" -ForegroundColor Cyan
        Write-Host "  Total: $totalTests" -ForegroundColor White
        Write-Host "  Passed: $passedTests" -ForegroundColor Green
        Write-Host "  Failed: $failedTests" -ForegroundColor Red
        
        if ($failedTests -gt 0) {
          Write-Host "‚ùå Tests failed" -ForegroundColor Red
          exit 1
        } else {
          Write-Host "‚úÖ All tests passed" -ForegroundColor Green
        }
    
    - name: Check Documentation
      shell: pwsh
      run: |
        $missingDocs = @()
        
        # Check for README files in project directories
        Get-ChildItem -Path . -Directory | Where-Object { 
          $_.Name -notmatch '^(\.github|\.git|docs|scripts)$' 
        } | ForEach-Object {
          $readmePath = Join-Path $_.FullName "README.md"
          if (!(Test-Path $readmePath)) {
            $missingDocs += "Missing README.md in $($_.Name)"
          }
        }
        
        if ($missingDocs.Count -gt 0) {
          Write-Host "‚ö†Ô∏è  Documentation issues found:" -ForegroundColor Yellow
          $missingDocs | ForEach-Object { Write-Host "  $_" }
        } else {
          Write-Host "‚úÖ Documentation check passed" -ForegroundColor Green
        }
    
    - name: Security Scan
      shell: pwsh
      run: |
        $securityIssues = @()
        
        # Check for hardcoded credentials or sensitive data
        $patterns = @(
          'password\s*=\s*["\'].*["\']',
          'username\s*=\s*["\'].*["\']',
          'secret\s*=\s*["\'].*["\']',
          'apikey\s*=\s*["\'].*["\']',
          'connectionstring\s*=\s*["\'].*["\']'
        )
        
        Get-ChildItem -Path . -Include "*.ps1","*.psm1","*.psd1" -Recurse | ForEach-Object {
          $content = Get-Content $_.FullName -Raw
          foreach ($pattern in $patterns) {
            if ($content -match $pattern) {
              $securityIssues += "Potential credential in $($_.Name): $($matches[0])"
            }
          }
        }
        
        if ($securityIssues.Count -gt 0) {
          Write-Host "üîí Security issues found:" -ForegroundColor Red
          $securityIssues | ForEach-Object { Write-Host "  $_" }
          Write-Host "Please review and remove any hardcoded credentials" -ForegroundColor Yellow
          exit 1
        } else {
          Write-Host "‚úÖ Security scan passed" -ForegroundColor Green
        }